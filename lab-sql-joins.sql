USE sakila; 

-- List the number of films per category.

SELECT c.name, COUNT(f.film_id) AS Number_of_films FROM sakila.category AS c
JOIN sakila.film_category AS f
ON c.category_id = f.category_id
GROUP BY c.name
ORDER BY Number_of_films DESC;

-- Retrieve the store ID, city, and country for each store.

SELECT s.store_id, c.city, ca.country FROM sakila.store AS s
JOIN sakila.address AS a
ON s.address_id = a.address_id
JOIN sakila.city AS c
ON a.city_id = c.city_id
JOIN sakila.country AS ca
ON c.country_id = ca.country_id;

-- Calculate the total revenue generated by each store in dollars.

SELECT st.store_id, COUNT(p.amount) AS Revenue_$ FROM sakila.staff AS st
JOIN sakila.payment AS p
ON st.staff_id = p.staff_id
GROUP BY st.store_id;

-- Determine the average running time of films for each category.

SELECT c.name, AVG(f.length) AS Average_Time FROM sakila.film AS f
JOIN sakila.film_category AS fc
ON f.film_id = fc.film_id
JOIN sakila.category as c
ON fc.category_id = c.category_id
GROUP BY c.name;

-- ========================================================================================================================

-- Identify the film categories with the longest average running time.

SELECT c.name, AVG(f.length) AS Average_Time FROM sakila.film AS f
JOIN sakila.film_category AS fc
ON f.film_id = fc.film_id
JOIN sakila.category as c
ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY Average_Time DESC;

-- Display the top 10 most frequently rented movies in descending order.

SELECT title, rental_rate FROM sakila.film
ORDER BY rental_rate DESC
LIMIT 10;

-- Determine if "Academy Dinosaur" can be rented from Store 1.

SELECT f.title, i.store_id, 
CASE
 WHEN COUNT(i.inventory_id) > 0 THEN 'Available'
 ELSE 'NOT Available'
END AS availability_status
FROM sakila.film as f
JOIN sakila.inventory AS i
ON f.film_id = i.film_id
GROUP BY f.title, i.store_id
HAVING f.title = 'Academy Dinosaur' AND i.store_id = 1;


-- Provide a list of all distinct film titles, along with their availability status in the inventory. 

SELECT f.title,
CASE 
 WHEN COUNT(i.inventory_id) > 0 THEN 'Available'
 ELSE 'NOT Available'
END AS availability_status
FROM sakila.film AS f
LEFT JOIN inventory AS i 
ON f.film_id = i.film_id
GROUP BY f.film_id, f.title;

-- Include a column indicating whether each title is 'Available' or 'NOT available.'
